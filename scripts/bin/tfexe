#!/bin/bash

# example:
# tfexe plan -path=/tf/avm/templates/landingzone/configuration/2-solution_accelerators/project/acr
# tfexe apply -path=/tf/avm/templates/landingzone/configuration/2-solution_accelerators/project/acr
# tfexe plan -path=/tf/avm/templates/landingzone/configuration/2-solution_accelerators/project/acr -var="prefix=hubspoke -var=location=westus2"
# tfexe apply -path=/tf/avm/templates/landingzone/configuration/2-solution_accelerators/project/acr -var="prefix=hubspoke -var=location=westus2"
# tfexe apply run-all -path=/tf/avm/templates/landingzone/configuration/2-solution_accelerators/project"
# tfexe apply run-all -include=/tf/avm/config/path.hcl"
# tfexe import # import existing vnet into state file
# tfexe generate-config # generate config.yaml file based on inputs
# tfexe deploy-app-lz # execute import, application landing zone and solution accelerators without generate-config file commands
# tfexe deploy # deploy azure resource based on settings.yaml file and inputs
# tfexe update-remote-state # refresh config.yaml file to match the current state of the infrastructure
# tfexe apply -backend-config-key=network-spoke-project.tfstate
# tfexe setup-law # create subscription log analytics workspace and resource group

TF_WORKING_DIRECTORY="/tf/avm"

# Begin Functions
exec_terraform() {

  local ACTION=$1
  local TF_CONFIG=$2
  local TF_VAR_FILE=$3
  local TF_BACKEND_CONFIG_KEY=$4
  local TF_VARS=("${@:5}")

  if [[ "$ACTION" == *"init"* || "$ACTION" == *"plan"* || "$ACTION" == *"apply"* || "$ACTION" == *"import"*  || "$ACTION" == *"generate-config"* || "$ACTION" == *"deploy"* || "$ACTION" == *"update-remote-state"* || "$ACTION" == *"deploy-app-lz"* || "$ACTION" == *"setup-law"* ]]; then
    # alway exec terraform init

    if [[ "$ACTION" != *"import"* && "$ACTION" != *"generate-config"* && "$ACTION" != *"deploy"* && "$ACTION" != *"update-remote-state"* && "$ACTION" != *"deploy-app-lz"* && "$ACTION" != *"setup-law"* ]]; then

      echo "Using config file: $TF_CONFIG"
      PREFIX=$(yq  -r '.prefix' $TF_CONFIG)
      RG_NAME="${PREFIX}-rg-launchpad"
      STG_NAME=$(az storage account list --resource-group $RG_NAME --query "[?contains(name, '${PREFIX//-/}stgtfstate')].[name]" -o tsv 2>/dev/null | head -n 1)
      echo "Resource Group name: ${RG_NAME}"
      echo "Storage Account name: ${STG_NAME}"

      # Get the folder name from the current directory

      PATH_STRING="$(pwd)"

      if [[ "$PATH_STRING" == *"2-solution_accelerators"* ]]; then
        # solution accelerators

        PATH_STRING=$(pwd)
        EXTRACTED_NAME=$(echo "$PATH_STRING" | awk -F'/' '{gsub("_", "", $NF); print $(NF-1) "-" $NF}')
        CONTAINER_NAME="2-solution-accelerators"
        EXTRACTED_NAME="${EXTRACTED_NAME//_/-}"
        if [[ "$TF_BACKEND_CONFIG_KEY" == "" || "$TF_BACKEND_CONFIG_KEY" == "null" ]]; then
          KEY="solution-accelerators-${EXTRACTED_NAME}.tfstate"
          echo "Container name: ${CONTAINER_NAME}"
          echo "Key: ${KEY}"
        else
          # e.g. -backend-config-key=network-spoke-project.tfstate
            KEY="${TF_BACKEND_CONFIG_KEY}"
            echo "Container name: ${CONTAINER_NAME}"
            echo "Key: ${KEY}"
        fi

      else 
        # 1-landingzones e.g. network-spoke-project.tfstate

        PATH_STRING=$(echo "$(pwd)" | tr '_' '-')
        EXTRACTED_NAME=$(echo "$PATH_STRING" | awk -F'/' '{print $NF}' | sed 's/networking/network/g')
        CONTAINER_NAME="1-landingzones"
        EXTRACTED_NAME="${EXTRACTED_NAME//_/-}"
        if [[ "$TF_BACKEND_CONFIG_KEY" == "" || "$TF_BACKEND_CONFIG_KEY" == "null" ]]; then
          KEY="${EXTRACTED_NAME}.tfstate"
          echo "Container name: ${CONTAINER_NAME}"
          echo "Key: ${KEY}"
        else
          # e.g. -backend-config-key=network-spoke-project.tfstate
            KEY="${TF_BACKEND_CONFIG_KEY}"
            echo "Container name: ${CONTAINER_NAME}"
            echo "Key: ${KEY}"
        fi

      fi

      # Store the command in a variable
      cmdexecute="terraform init -reconfigure \
        -backend-config=\"resource_group_name=${RG_NAME}\" \
        -backend-config=\"storage_account_name=${STG_NAME}\" \
        -backend-config=\"container_name=${CONTAINER_NAME}\" \
        -backend-config=\"key=${KEY}\""

      # Print the command (for debugging)
      echo "Running..."
      echo $cmdexecute

      # deploy the solution accelerator
      terraform init  -reconfigure \
      -backend-config="resource_group_name=${RG_NAME}" \
      -backend-config="storage_account_name=${STG_NAME}" \
      -backend-config="container_name=${CONTAINER_NAME}" \
      -backend-config="key=${KEY}"

      if [ $? -ne 0 ]; then
        echo -e "     "
        echo -e "\e[31mTerraform init failed for ${EXTRACTED_NAME}. Exiting.\e[0m"
        exit 1
      else
        echo -e "     "
        echo -e "\e[32mTerraform init succeeded for ${EXTRACTED_NAME}!\e[0m"
      fi
    fi

  fi


  if [[ "$ACTION" == *"apply"* ]]; then
    echo "     "
    echo "Running..."
    if [[ "$TF_VAR_FILE" == "" || "$TF_VAR_FILE" == "null" ]]; then
      echo "terraform $ACTION  -auto-approve -var=storage_account_name=${STG_NAME} -var=resource_group_name=${RG_NAME} ${TF_VARS[@]}"
      echo "     "
      terraform "$ACTION" -auto-approve -var="storage_account_name=${STG_NAME}" -var="resource_group_name=${RG_NAME}" "${TF_VARS[@]}"
    else
      echo "terraform $ACTION -auto-approve -var=storage_account_name=${STG_NAME} -var=resource_group_name=${RG_NAME} ${TF_VARS[@]} ${TF_VAR_FILE}"
      echo "     "
      terraform "$ACTION" -auto-approve -var="storage_account_name=${STG_NAME}" -var="resource_group_name=${RG_NAME}" "${TF_VARS[@]}" "${TF_VAR_FILE}"
    fi    
    
    if [ $? -ne 0 ]; then
      echo -e "     "
      echo -e "\e[31mTerraform $ACTION failed for ${EXTRACTED_NAME}. Exiting.\e[0m"
      exit 1
    else
      echo -e "     "
      echo -e "\e[32mTerraform $ACTION succeeded for ${EXTRACTED_NAME}!\e[0m"
    fi

  elif [[ "$ACTION" == *"plan"* ]]; then
    echo "     "
    echo "Running..."
    if [[ "$TF_VAR_FILE" == "" || "$TF_VAR_FILE" == "null" ]]; then
      echo "terraform $ACTION -var=storage_account_name=${STG_NAME} -var=resource_group_name=${RG_NAME} ${TF_VARS[@]}"
      echo "     "
      terraform "$ACTION"  -var="storage_account_name=${STG_NAME}" -var="resource_group_name=${RG_NAME}" "${TF_VARS[@]}"
    else
      echo "terraform $ACTION -var=storage_account_name=${STG_NAME} -var=resource_group_name=${RG_NAME} ${TF_VARS[@]} ${TF_VAR_FILE}"
      echo "     "
      terraform "$ACTION"  -var="storage_account_name=${STG_NAME}" -var="resource_group_name=${RG_NAME}" "${TF_VARS[@]}" "${TF_VAR_FILE}"
    fi
    
    if [ $? -ne 0 ]; then
      echo -e "     "
      echo -e "\e[31mTerraform $ACTION failed for ${EXTRACTED_NAME}. Exiting.\e[0m"
      exit 1
    else
      echo -e "     "
      echo -e "\e[32mTerraform $ACTION succeeded for ${EXTRACTED_NAME}!\e[0m"
    fi

  elif [[ "$ACTION" == *"import"* ]]; then
    # echo "Go to working directory /tf/avm/templates/landingzone/configuration/0-launchpad/launchpad_agency_managed_vnet/scripts"
    echo "Go to working directory /tf/avm/scripts/bin"
    echo "Running..."
    echo "./import.sh"
    echo "     "
    # execute from current folder or -path parameter if exists
    # cd /tf/avm/templates/landingzone/configuration/0-launchpad/launchpad_agency_managed_vnet/scripts
    cd "${TF_WORKING_DIRECTORY}/scripts/bin"
    ./import.sh  # Check if the command was successful
    if [ $? -ne 0 ]; then
      echo -e "     "
      echo -e "\e[31mTerraform $ACTION failed. Exiting.\e[0m"
      exit 1
    else
      echo -e "     "
      echo -e "\e[32mTerraform $ACTION succeeded!\e[0m"
    fi    

  elif [[ "$ACTION" == *"generate-config"* ]]; then
    echo "Go to working directory /tf/avm/scripts/bin"
    echo "Running..."
    echo "./generate_config.sh"
    echo "     "
    # execute from current folder or -path parameter if exists
    cd "${TF_WORKING_DIRECTORY}/scripts/bin"
    ./generate_config.sh  # Check if the command was successful
    if [ $? -ne 0 ]; then
      echo -e "     "
      echo -e "\e[31mTerraform $ACTION failed. Exiting.\e[0m"
      exit 1
    else
      echo -e "     "
      echo -e "\e[32mTerraform $ACTION succeeded!\e[0m"
    fi    

  elif [[ "$ACTION" == *"update-remote-state"* ]]; then
    # echo "Go to working directory /tf/avm/templates/landingzone/configuration/0-launchpad/launchpad_healthcare/scripts"
    echo "Go to working directory /tf/avm/scripts/bin"
    echo "Running..."
    echo "./update_remote_state.sh"
    echo "     "
    # execute from current folder or -path parameter if exists
    # cd /tf/avm/templates/landingzone/configuration/0-launchpad/launchpad_healthcare/scripts
    cd "${TF_WORKING_DIRECTORY}/scripts/bin"
    ./update_remote_state.sh  # Check if the command was successful
    if [ $? -ne 0 ]; then
      echo -e "     "
      echo -e "\e[31mTerraform $ACTION failed. Exiting.\e[0m"
      exit 1
    else
      echo -e "     "
      echo -e "\e[32mTerraform $ACTION succeeded!\e[0m"
    fi    

  elif [[ "$ACTION" == *"deploy-app-lz"* ]]; then
    echo "Go to working directory /tf/avm/scripts/bin"
    echo "Running..."
    echo "./deploy_app_lz.sh"
    echo "     "
    # execute from current folder or -path parameter if exists
    cd "${TF_WORKING_DIRECTORY}/scripts/bin"
    ./deploy_app_lz.sh  # Check if the command was successful
    if [ $? -ne 0 ]; then
      echo -e "     "
      echo -e "\e[31mTerraform $ACTION failed. Exiting.\e[0m"
      exit 1
    else
      echo -e "     "
      echo -e "\e[32mTerraform $ACTION succeeded!\e[0m"
    fi     

  elif [[ "$ACTION" == *"setup-law"* ]]; then
    echo "Go to working directory /tf/avm/scripts/bin"
    echo "Running..."
    echo "./setup_law.sh"
    echo "     "
    # execute from current folder or -path parameter if exists
    cd "${TF_WORKING_DIRECTORY}/scripts/bin"
    ./setup_law.sh  # Check if the command was successful
    if [ $? -ne 0 ]; then
      echo -e "     "
      echo -e "\e[31mCreate log analytics workspace failed. Exiting.\e[0m"
      exit 1
    else
      echo -e "     "
      echo -e "\e[32mCreate log analytics workspace succeeded!\e[0m"
    fi      

  elif [[ "$ACTION" == *"deploy"* ]]; then
    echo "Go to working directory /tf/avm/scripts/bin"
    echo "Running..."
    echo "./deploy.sh"
    echo "     "
    # execute from current folder or -path parameter if exists
    cd "${TF_WORKING_DIRECTORY}/scripts/bin"
    ./deploy.sh  # Check if the command was successful
    if [ $? -ne 0 ]; then
      echo -e "     "
      echo -e "\e[31mTerraform $ACTION failed. Exiting.\e[0m"
      exit 1
    else
      echo -e "     "
      echo -e "\e[32mTerraform $ACTION succeeded!\e[0m"
    fi    

  fi  

}

# End Functions

# Check if at least 2 arguments are provided
if [[ $# -lt 1 ]]; then
    echo "Usage: tfexe <init|apply|plan|import|generate-config|deploy|update-remote-state|deploy-app-lz|setup-law> [-var=key=value | -path=path | -config=configpath]..."
    echo " "
    echo "The available commands for execution are listed below."
    echo "The primary workflow commands are given first, followed by"
    echo "less common or more advanced commands."
    echo " "
    echo "Main commands:"
    echo "  init                  Prepare your working directory for other commands"
    echo "  plan                  Execute init and then show changes required by the current configuration"
    echo "  apply                 Execute init and then create or update infrastructure"
    echo "  import                Import existing VNET infrastructure into your Terraform state"
    echo "  generate-config       Generate config.yaml file based on inputs"
    echo "  setup-law             Setup subscription log analytics workspace and resource group"
    echo "  deploy                Deploy azure resource based on settings.yaml file and prompt inputs"
    echo "  update-remote-state   Update remote terraform state with the latest config.yaml file content"
    echo "  deploy-app-lz         Execute 0-launchpad, 1-landingzones and 2-solution_accelerators without generate-config file commands"

    echo " "
    echo "All other commands:"
    echo "  run-all               Execute all the solution accelerators of all sub-folders under this parent folder"
    echo "  -include              Execute all the solution accelerators under the folders listed in the file"
    echo "  -path                 The path to the Terraform configuration (if not the current directory)"
    echo "  -config               The path and filename to the Terraform configuration file - config.yaml"
    echo "  -var                  Set a variable in the Terraform configuration"
    echo "  -var-file             Specify a variable file to use"
    echo "  -backend-config-key   Specify a backend terraform state name for the azure resource"
    echo " "
    echo "Example: "
    echo "tfexe init -path=/tf/avm/templates/landingzone/configuration/2-solution_accelerators/project/acr"  
    echo "tfexe plan -path=/tf/avm/templates/landingzone/configuration/2-solution_accelerators/project/acr"  
    echo "tfexe apply -path=/tf/avm/templates/landingzone/configuration/2-solution_accelerators/project/acr -var=subnet_name=AppSubnet"       
    echo "tfexe apply -path=/tf/avm/templates/landingzone/configuration/2-solution_accelerators/project/acr -config=/tf/avm/scripts/templates/config.yaml"
    echo "tfexe apply" 
    echo "tfexe apply run-all -path=/tf/avm/templates/landingzone/configuration/2-solution_accelerators/project"
    echo "tfexe apply run-all -include=/tf/avm/config/path.hcl"
    echo "tfexe apply -var-file=/tf/avm/config/terraform.tfvars"
    echo "tfexe apply -backend-config-key=network-spoke-project.tfstate"
    echo "tfexe import"
    echo "tfexe generate-config"
    echo "tfexe setup-law"
    echo "tfexe deploy"
    echo "tfexe deploy-app-lz"
    echo "tfexe update-remote-state"
    exit 1
fi

# Extract first argument (apply or plan or init or import)
ACTION=$1
shift

if [[ "$ACTION" != "apply" && "$ACTION" != "plan" && "$ACTION" != "init"  && "$ACTION" != "import"  && "$ACTION" != "generate-config" && "$ACTION" != "deploy" && "$ACTION" != "update-remote-state" && "$ACTION" != "deploy-app-lz" && "$ACTION" != "setup-law" ]]; then
    echo -e "\e[31mError: First parameter must be 'init' or 'apply' or 'plan' or 'import' or 'generate-config' or 'deploy' or 'update-remote-state' or 'deploy-app-lz' or 'setup-law'\e[0m"
    exit 1
fi

# Collect variables and path
TF_VARS=()
TF_PATH=""
TF_CONFIG=""
TF_RUN_ALL=""
TF_INCLUDE=""
TF_VAR_FILE=""
TF_BACKEND_CONFIG_KEY=""

while [[ $# -gt 0 ]]; do
    # echo "Processing argument: $1"
    if [[ "$1" =~ ^-var= ]]; then
        TF_VARS+=("$1")

    elif [[ "$1" =~ ^-path= ]]; then
        if [[ -n "$TF_PATH" ]]; then
            echo -e "\e[31mError: Only one '-path' argument is allowed.\e[0m"
            exit 1
        fi
        TF_PATH="${1#-path=}"

    elif [[ "$1" =~ ^-config= ]]; then
        if [[ -n "$TF_CONFIG" ]]; then
            echo -e "\e[31mError: Only one '-path' argument is allowed.\e[0m"
            exit 1
        fi
        TF_CONFIG="${1#-config=}"   

    elif [[ "$1" =~ ^run-all ]]; then
        if [[ -n "$TF_RUN_ALL" ]]; then
            echo -e "\e[31mError: Only one 'run-all' argument is allowed.\e[0m"
            exit 1
        fi
        TF_RUN_ALL="${1}"      

    elif [[ "$1" =~ ^-include ]]; then
        if [[ -n "$TF_INCLUDE" ]]; then
            echo -e "\e[31mError: Only one '-include' argument is allowed.\e[0m"
            exit 1
        fi
        TF_INCLUDE="${1#-include=}"      

    elif [[ "$1" =~ ^-var-file ]]; then
        if [[ -n "$TF_VAR_FILE" ]]; then
            echo -e "\e[31mError: Only one '-var-file' argument is allowed.\e[0m"
            exit 1
        fi
        # e.g. -var-file=./tfvars.tfvars
        TF_VAR_FILE="${1}"        

    elif [[ "$1" =~ ^-backend-config-key ]]; then
        if [[ -n "$TF_BACKEND_CONFIG_KEY" ]]; then
            echo -e "\e[31mError: Only one '-backend-config-key' argument is allowed.\e[0m"
            exit 1
        fi
        # e.g. -var-file=./tfvars.tfvars
        # TF_INCLUDE="${1#-include=}"  
        TF_BACKEND_CONFIG_KEY="${1#-backend-config-key=}"          
        # TF_BACKEND_CONFIG_KEY="${1}"     

    else
        echo -e "\e[31mError: invalid argument '$1'\e[0m"
        exit 1
    fi
    shift
done

if [[ -z "$TF_CONFIG" ]]; then
  echo "Using default config file"
  # TODO: change this to /tf/avm/config/config.yaml
  # TF_CONFIG="${TF_WORKING_DIRECTORY}/templates/landingzone/configuration/0-launchpad/scripts/config.yaml"
  TF_CONFIG="${TF_WORKING_DIRECTORY}/config/config.yaml"
fi

# Ensure at least one -path is provided
if [[ -z "$TF_PATH" ]]; then
    echo "Using current directory as path"
    echo "$(pwd)"
else
  if [[ ! -d "$TF_PATH" ]]; then
      echo -e "\e[31mError: Specified path '$TF_PATH' does not exist.\e[0m"
      exit 1
  fi
  # goto working directory
  echo "Executing Terraform in directory: $TF_PATH"
  cd "$TF_PATH" || exit
fi


if [[ -z "$TF_RUN_ALL" ]]; then

    echo "Execute <$ACTION> action in the current directory"
    if [[ "$TF_VAR_FILE" == "" || "$TF_VAR_FILE" == "null" ]]; then 
      TF_VAR_FILE="null"
    fi
        
    if [[ "$TF_BACKEND_CONFIG_KEY" == "" || "$TF_BACKEND_CONFIG_KEY" == "null" ]]; then
      TF_BACKEND_CONFIG_KEY="null"
    fi

    # exec_terraform "$ACTION" "$TF_CONFIG" $TF_VAR_FILE $TF_BACKEND_CONFIG_KEY "${TF_VARS[@]}" 
    exec_terraform "$ACTION" "$TF_CONFIG" $TF_VAR_FILE $TF_BACKEND_CONFIG_KEY "${TF_VARS[@]}" 

else

  if [[ -z "$TF_INCLUDE" ]]; then


    echo "execute all the solution accelerators of all sub-folders under this parent folder"
    echo "$(pwd)"

    # Loop through first-level subfolders
    PARENT_FOLDER="$(pwd)"  # Set parent folder to the current directory
    for dir in "$PARENT_FOLDER"/*/; do
      # Check if it is a directory
      if [ -d "$dir" ]; then

        echo "$dir"
        cd "$dir"
        if [[ "$TF_VAR_FILE" == "" || "$TF_VAR_FILE" == "null" ]]; then 
          TF_VAR_FILE="null"
        fi
        
        if [[ "$TF_BACKEND_CONFIG_KEY" == "" || "$TF_BACKEND_CONFIG_KEY" == "null" ]]; then
          TF_BACKEND_CONFIG_KEY="null"
        fi

        # exec_terraform "$ACTION" "$TF_CONFIG" $TF_VAR_FILE $TF_BACKEND_CONFIG_KEY "${TF_VARS[@]}" 
        exec_terraform "$ACTION" "$TF_CONFIG" $TF_VAR_FILE $TF_BACKEND_CONFIG_KEY "${TF_VARS[@]}" 

      fi
    done


  else


    FILE="$TF_INCLUDE" # "include.hcl"  # File containing paths

    # Check if file exists
    if [[ ! -f "$FILE" ]]; then
      echo -e "\e[31mError: File '$FILE' not found.\e[0m"
      exit 1
    fi

    if [ "$ACTION" = "apply" ]; then

      # # Read and loop through each line
      # while IFS= read -r line || [[ -n "$line" ]]; do
      #   echo "Running..."
      #   echo "$line"

      #   # # execute the command
      #   # eval "$line"
      #   if [ $? -ne 0 ]; then
      #     echo -e "     "
      #     echo -e "\e[31mCommand execution failed for '$line'. Exiting.\e[0m"
      #     exit 1
      #   else
      #     echo -e "     "
      #     echo -e "\e[32mCommand execution succeeded for '$line'!\e[0m"
      #   fi    

      # done < "$FILE"

      # Initialize an empty array
      COMMAND_ARRAY=()

      # Read and store lines in the array
      echo "Processing Commands in include file: '$FILE'"
      while IFS= read -r line || [[ -n "$line" ]]; do
        echo "$line"


        if [[ -n "$line" ]]; then
          # Trim leading whitespace and check if the line starts with '#'
          trimmed_line="${line#"${line%%[![:space:]]*}"}"     
          
          if [[ -n "$trimmed_line" ]]; then

            if [[ "${trimmed_line:0:1}" == "#" ]]; then
              echo "Skipping comments: $line"
            else   
              # Extract the first word
              first_word="${trimmed_line%% *}"
              # Check if the first word is allowed
              if [[ "$first_word" == "echo" || "$first_word" == "tfexe" ]]; then
                # Add the trimmed line to the array
                echo "Adding command to array: $trimmed_line"
                COMMAND_ARRAY+=("$trimmed_line") 
              else
                echo "ERROR: Invalid command: $first_word : $trimmed_line"
                exit 1
              fi
            fi   
            
          else
            echo "Skipping empty lines with spaces only"
          fi

        else
          echo "Skipping empty lines"
        fi

      done < "$FILE"


      echo " "
      echo "processing ${#COMMAND_ARRAY[@]} commands from the include file: '$FILE'"
      echo " "
      # Loop through the array and echo each line
      for cmd in "${COMMAND_ARRAY[@]}"; do

        # Trim leading whitespace and check if the line starts with '#'
        trimmed_line="${cmd#"${cmd%%[![:space:]]*}"}"

        if [[ "${trimmed_line:0:1}" == "#" ]]; then
          echo "Skipping comments: $cmd"
        else
          echo "Running..."
          echo "$trimmed_line"
          # # execute the command
          eval "$trimmed_line"     
          if [ $? -ne 0 ]; then
            echo -e "     "
            echo -e "\e[31mCommand execution failed for '$trimmed_line'. Exiting.\e[0m"
            exit 1
          else
            echo -e "     "
            echo -e "\e[32mCommand execution succeeded for '$trimmed_line'!\e[0m"
          fi  
        fi
            
      done

    else
        echo -e "     "
        echo -e "\e[32mTo use -include, the first parameter must be 'apply'!\e[0m"
        exit 1
    fi    

  fi

fi
