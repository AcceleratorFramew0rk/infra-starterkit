#!/bin/bash

# example:
# tftool plan -path=/tf/avm/templates/landingzone/configuration/2-solution_accelerators/project/acr
# tftool apply -path=/tf/avm/templates/landingzone/configuration/2-solution_accelerators/project/acr
# tftool plan -path=/tf/avm/templates/landingzone/configuration/2-solution_accelerators/project/acr -var="prefix=hubspoke -var=location=westus2"
# tftool apply -path=/tf/avm/templates/landingzone/configuration/2-solution_accelerators/project/acr -var="prefix=hubspoke -var=location=westus2"

# Check if at least 2 arguments are provided
if [[ $# -lt 2 ]]; then
    echo "Usage: tftool <apply|plan> [-var=key=value | -path=path]..."
    exit 1
fi

# Extract first argument (apply or plan)
ACTION=$1
shift

if [[ "$ACTION" != "apply" && "$ACTION" != "plan" ]]; then
    echo "Error: First parameter must be 'apply' or 'plan'"
    exit 1
fi

# Collect variables and path
TF_VARS=()
TF_PATH=""

while [[ $# -gt 0 ]]; do
    if [[ "$1" =~ ^-var= ]]; then
        TF_VARS+=("$1")
    elif [[ "$1" =~ ^-path= ]]; then
        if [[ -n "$TF_PATH" ]]; then
            echo "Error: Only one '-path' argument is allowed."
            exit 1
        fi
        TF_PATH="${1#-path=}"
    else
        echo "Warning: Ignoring invalid argument '$1'"
    fi
    shift
done

# Ensure at least one -path is provided
if [[ -z "$TF_PATH" ]]; then
    echo "Error: A '-path' argument is required."
    exit 1
fi

if [[ ! -d "$TF_PATH" ]]; then
    echo "Error: Specified path '$TF_PATH' does not exist."
    exit 1
fi

# goto working directory
echo "Executing Terraform in directory: $TF_PATH"
cd "$TF_PATH" || exit


# exec terraform init
PREFIX=$(yq  -r '.prefix' /tf/avm/templates/landingzone/configuration/0-launchpad/scripts/config.yaml)
RG_NAME="${PREFIX}-rg-launchpad"
STG_NAME=$(az storage account list --resource-group $RG_NAME --query "[?contains(name, '${PREFIX//-/}stgtfstate')].[name]" -o tsv 2>/dev/null | head -n 1)
echo "Resource Group name: ${RG_NAME}"
echo "Storage Account name: ${STG_NAME}"

# Get the folder name from the current directory

PATH_STRING="$(pwd)"


if [[ "$PATH_STRING" == *"2-solution_accelerators"* ]]; then
  # solution accelerators
  PATH_STRING=$(echo "$(pwd)" | tr -d '_')
  EXTRACTED_NAME=$(echo "$PATH_STRING" | awk -F'/' '{print $(NF-1) "-" $NF}')
  CONTAINER_NAME="1-landingzones"
  KEY="solution_accelerators-${EXTRACTED_NAME}.tfstate"
  echo "Container name: ${CONTAINER_NAME}"
  echo "Key: ${KEY}"
else 
  # 1-landingzones
  PATH_STRING=$(echo "$(pwd)" | tr -d '_')
  EXTRACTED_NAME=$(echo "$PATH_STRING" | awk -F'/' '{print $(NF-1) "-" $NF}')
  CONTAINER_NAME="1-landingzones"
  KEY="landingzones-${EXTRACTED_NAME}.tfstate"
  echo "Container name: ${CONTAINER_NAME}"
  echo "Key: ${KEY}"
fi

# Store the command in a variable
cmdexecute="terraform init -reconfigure \
  -backend-config=\"resource_group_name=${RG_NAME}\" \
  -backend-config=\"storage_account_name=${STG_NAME}\" \
  -backend-config=\"container_name=${CONTAINER_NAME}\" \
  -backend-config=\"key=${KEY}\""

# Print the command (for debugging)
echo "Running..."
echo $cmdexecute

# deploy the solution accelerator
terraform init  -reconfigure \
-backend-config="resource_group_name=${RG_NAME}" \
-backend-config="storage_account_name=${STG_NAME}" \
-backend-config="container_name=${CONTAINER_NAME}" \
-backend-config="key=${KEY}"

if [ $? -ne 0 ]; then
  echo -e "     "
  echo -e "\e[31mTerraform init failed for ${EXTRACTED_NAME}. Exiting.\e[0m"
  exit 1
else
  echo -e "     "
  echo -e "\e[32mTerraform init succeeded for ${EXTRACTED_NAME}!\e[0m"
fi


echo "Running..."
echo "terraform $ACTION ${TF_VARS[*]}"

if [[ "$ACTION" == *"apply"* ]]; then
  terraform "$ACTION" -auto-approve "${TF_VARS[@]}"
else
  terraform "$ACTION" "${TF_VARS[@]}"
fi



if [ $? -ne 0 ]; then
  echo -e "     "
  echo -e "\e[31mTerraform $ACTION failed for ${EXTRACTED_NAME}. Exiting.\e[0m"
  exit 1
else
  echo -e "     "
  echo -e "\e[32mTerraform $ACTION succeeded for ${EXTRACTED_NAME}!\e[0m"
fi
